<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>org.hello.drools</groupId>
    <artifactId>hello-drools</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <packaging>war</packaging>

    <properties>
        <failOnMissingWebXml>false</failOnMissingWebXml>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <fabric8.docker.maven.plugin>0.28.0</fabric8.docker.maven.plugin>
        <version.thorntail>2.3.0.Final</version.thorntail>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>javax</groupId>
                <artifactId>javaee-api</artifactId>
                <version>7.0</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>io.thorntail</groupId>
                <artifactId>bom-all</artifactId>
                <version>${version.thorntail}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-api</artifactId>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <build>
        <finalName>hello-drools</finalName>
        <plugins>
            <plugin>
                <groupId>io.thorntail</groupId>
                <artifactId>thorntail-maven-plugin</artifactId>
                <version>${version.thorntail}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>package</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>${fabric8.docker.maven.plugin}</version>
                <configuration>
                    <images>
                        <image>
                            <name>172.30.1.1:5000/${user.name}/%a:%v</name>
                            <run>
                                <ports>
                                    <!-- mvn docker:run will map container port 8080 to localhost:8080-->
                                    <port>8080:8080</port>
                                </ports>
                            </run>
                            <build>
                                <from>registry.redhat.io/redhat-openjdk-18/openjdk18-openshift</from>
                                <ports>
                                    <!-- exposes the container port to 8080-->
                                    <port>8080</port>
                                </ports>
                                <env>
                                    <!-- the openjdk images looks for the JAVA_APP_JAR placed on /deployments -->
                                    <JAVA_APP_JAR>${project.artifactId}-thorntail.jar</JAVA_APP_JAR>
                                </env>
                                <assembly>
                                    <!-- directory to where the generated uber jar will be copied -->
                                    <basedir>/deployments</basedir>
                                    <inline>
                                        <files>
                                            <file>
                                                <source>${project.build.directory}/${project.artifactId}-thorntail.jar
                                                </source>
                                            </file>
                                        </files>
                                    </inline>
                                </assembly>
                            </build>
                        </image>
                    </images>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>ocp</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>fabric8-maven-plugin</artifactId>
                        <version>4.0.0-M1</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>resource</goal>
                                    <goal>build</goal>
                                    <goal>deploy</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <generateRoute>true</generateRoute>
                            <enricher>
                                <config>
                                    <fmp-service>
                                        <type>NodePort</type>
                                    </fmp-service>
                                </config>
                            </enricher>
                            <!--<images>-->
                                <!--<image>-->
                                    <!--<name>%a:%v</name>-->
                                    <!--<alias>hello-drools-app</alias>-->
                                    <!--<build>-->
                                        <!-- ATM found a issue when the openjdk image is used as base image for s2i builds
                                        from fabric8-maven-plugin. This command does no copy the artifacts to the right location:
                                        https://github.com/jboss-openshift/cct_module/blob/1ff1d9637979b1d0b116f247640f5330b20a7a45/jboss/container/java/s2i/bash/artifacts/opt/jboss/container/java/s2i/maven-s2i-overrides#L31
                                        The command does not copies anything, just skip the directory,
                                        running locally (the directories below are exactly the same than the s2i builds):

                                        before run the command below add minus minus together before out flag

                                        rsync -l out-format='%n' /tmp/src/maven/ /deployments
                                        skipping directory .

                                        directory content:
                                        $ ls  /tmp/src/maven/
                                        hello-drools-thorntail.jar

                                        While this issue is not fixed, let's just use the default fabric8 java image
                                        -->
                                        <!--<from>registry.redhat.io/redhat-openjdk-18/openjdk18-openshift</from>-->
                                        <!--<env>-->
                                            <!--&lt;!&ndash; the openjdk images looks for the JAVA_APP_JAR placed on /deployments &ndash;&gt;-->
                                            <!--<JAVA_APP_JAR>${project.artifactId}-thorntail.jar</JAVA_APP_JAR>-->
                                        <!--</env>-->
                                        <!--<assembly>-->
                                            <!--<basedir>/deployments</basedir>-->
                                            <!--<inline>-->
                                                <!--<files>-->
                                                    <!--<file>-->
                                                        <!--<source>${project.build.directory}/${project.artifactId}-thorntail.jar</source>-->
                                                    <!--</file>-->
                                                <!--</files>-->
                                            <!--</inline>-->
                                        <!--</assembly>-->
                                    <!--</build>-->
                                <!--</image>-->
                            <!--</images>-->
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
